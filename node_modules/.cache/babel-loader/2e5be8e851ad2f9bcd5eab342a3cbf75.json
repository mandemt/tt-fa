{"ast":null,"code":"const xscale = d3.scaleLinear().range([0, width]); // over hoeveel pixels de bar width verdeeld worden\n\nconst yscale = d3.scaleBand().rangeRound([0, height]).paddingInner(0.1); // over hoeveel pixels de bar height verdeelt worden met tussenruimte\n\nconst xaxis = d3.axisTop().scale(xscale); // de horizontale as maken zodat er ook lijnen komen te staan\n\nconst g_xaxis = groep.append('g').attr('class', 'x axis'); // deze as wordt een group met door d3 geintegreerde elementen zoals ticks en getallen\n\nconst yaxis = d3.axisLeft().scale(yscale); // de verticale as  met getallen aan de linkerkant\n\nconst g_yaxis = groep.append('g').attr('class', 'y axis');\nexport function update(new_data) {\n  // updaten van de data\n  xscale.domain([0, d3.max(new_data, d => d.keer)]); // over welke getallen de bars verdeeld moeten worden\n\n  yscale.domain(new_data.map(d => d.getal)); // hoeveel bars er moeten zijn\n\n  g_xaxis.transition().call(xaxis); // soepele overgang en de as aanpassen op de nieuwe data\n\n  g_yaxis.transition().call(yaxis);\n  const rect = groep.selectAll('rect').data(new_data).join( // omvat de gebeurtenissen met de data \n  enter => {\n    //  alle data die nog niet gevisualiseerd is en gemaakt moet worden\n    const rect_enter = enter.append('rect').attr('x', 0); // zorg dat de bar een <rect> element is die 0 pixels van de x as staat\n\n    return rect_enter;\n  }, update => update, // wat er gebeurd met de elementen die er al waren\n  exit => {\n    return exit.remove();\n  } // elementen die verdwenen zijn moeten uit de visualisatie gehaald worden met exit\n  );\n  rect.transition() // De animatie om soepeler de verandering weer te geven\n  .attr('height', yscale.bandwidth()) // hoe hoog de balk is ten opzichte van de andere data\n  .attr('width', d => xscale(d.keer)) // de breedte van de balk\n  .attr('y', d => yscale(d.getal)); // de balk kom te staan bij de variabele\n}","map":{"version":3,"sources":["/Users/tomplaneet/Desktop/techtrack/fp/tt-fa/src/components/updateData.js"],"names":["xscale","d3","scaleLinear","range","width","yscale","scaleBand","rangeRound","height","paddingInner","xaxis","axisTop","scale","g_xaxis","groep","append","attr","yaxis","axisLeft","g_yaxis","update","new_data","domain","max","d","keer","map","getal","transition","call","rect","selectAll","data","join","enter","rect_enter","exit","remove","bandwidth"],"mappings":"AACK,MAAMA,MAAM,GAAGC,EAAE,CAACC,WAAH,GAAiBC,KAAjB,CAAuB,CAAC,CAAD,EAAIC,KAAJ,CAAvB,CAAf,C,CAAmD;;AACnD,MAAMC,MAAM,GAAGJ,EAAE,CAACK,SAAH,GAAeC,UAAf,CAA0B,CAAC,CAAD,EAAIC,MAAJ,CAA1B,EAAuCC,YAAvC,CAAoD,GAApD,CAAf,C,CAAyE;;AAEzE,MAAMC,KAAK,GAAGT,EAAE,CAACU,OAAH,GAAaC,KAAb,CAAmBZ,MAAnB,CAAd,C,CAA0C;;AAC1C,MAAMa,OAAO,GAAGC,KAAK,CAACC,MAAN,CAAa,GAAb,EAAkBC,IAAlB,CAAuB,OAAvB,EAAgC,QAAhC,CAAhB,C,CAA2D;;AAE3D,MAAMC,KAAK,GAAGhB,EAAE,CAACiB,QAAH,GAAcN,KAAd,CAAoBP,MAApB,CAAd,C,CAA2C;;AAC3C,MAAMc,OAAO,GAAGL,KAAK,CAACC,MAAN,CAAa,GAAb,EAAkBC,IAAlB,CAAuB,OAAvB,EAAgC,QAAhC,CAAhB;AAEL,OAAO,SAASI,MAAT,CAAgBC,QAAhB,EAA0B;AAAE;AAE/BrB,EAAAA,MAAM,CAACsB,MAAP,CAAc,CAAC,CAAD,EAAIrB,EAAE,CAACsB,GAAH,CAAOF,QAAP,EAAkBG,CAAD,IAAOA,CAAC,CAACC,IAA1B,CAAJ,CAAd,EAF6B,CAEwB;;AACrDpB,EAAAA,MAAM,CAACiB,MAAP,CAAcD,QAAQ,CAACK,GAAT,CAAcF,CAAD,IAAOA,CAAC,CAACG,KAAtB,CAAd,EAH6B,CAGgB;;AAC7Cd,EAAAA,OAAO,CAACe,UAAR,GAAqBC,IAArB,CAA0BnB,KAA1B,EAJ6B,CAIK;;AAClCS,EAAAA,OAAO,CAACS,UAAR,GAAqBC,IAArB,CAA0BZ,KAA1B;AAEA,QAAMa,IAAI,GAAGhB,KAAK,CAACiB,SAAN,CAAgB,MAAhB,EAAwBC,IAAxB,CAA6BX,QAA7B,EAAuCY,IAAvC,EAA6C;AAErDC,EAAAA,KAAD,IAAW;AAAE;AAET,UAAMC,UAAU,GAAGD,KAAK,CAACnB,MAAN,CAAa,MAAb,EAAqBC,IAArB,CAA0B,GAA1B,EAA+B,CAA/B,CAAnB,CAFO,CAE+C;;AACtD,WAAOmB,UAAP;AAEH,GAPQ,EAQRf,MAAD,IAAYA,MARH,EAST;AACCgB,EAAAA,IAAD,IAAU;AAEN,WAAOA,IAAI,CAACC,MAAL,EAAP;AACH,GAbQ,CAaR;AAbQ,GAAb;AAiBAP,EAAAA,IAAI,CAACF,UAAL,GAAkB;AAAlB,GACKZ,IADL,CACU,QADV,EACoBX,MAAM,CAACiC,SAAP,EADpB,EACwC;AADxC,GAEKtB,IAFL,CAEU,OAFV,EAEoBQ,CAAD,IAAOxB,MAAM,CAACwB,CAAC,CAACC,IAAH,CAFhC,EAE0C;AAF1C,GAGKT,IAHL,CAGU,GAHV,EAGgBQ,CAAD,IAAOnB,MAAM,CAACmB,CAAC,CAACG,KAAH,CAH5B,EAxB6B,CA2BU;AAC1C","sourcesContent":["\n     const xscale = d3.scaleLinear().range([0, width]); // over hoeveel pixels de bar width verdeeld worden\n     const yscale = d3.scaleBand().rangeRound([0, height]).paddingInner(0.1); // over hoeveel pixels de bar height verdeelt worden met tussenruimte\n \n     const xaxis = d3.axisTop().scale(xscale); // de horizontale as maken zodat er ook lijnen komen te staan\n     const g_xaxis = groep.append('g').attr('class', 'x axis'); // deze as wordt een group met door d3 geintegreerde elementen zoals ticks en getallen\n \n     const yaxis = d3.axisLeft().scale(yscale); // de verticale as  met getallen aan de linkerkant\n     const g_yaxis = groep.append('g').attr('class', 'y axis');\n \nexport function update(new_data) { // updaten van de data\n    \n    xscale.domain([0, d3.max(new_data, (d) => d.keer)]); // over welke getallen de bars verdeeld moeten worden\n    yscale.domain(new_data.map((d) => d.getal)); // hoeveel bars er moeten zijn\n    g_xaxis.transition().call(xaxis); // soepele overgang en de as aanpassen op de nieuwe data\n    g_yaxis.transition().call(yaxis);\n\n    const rect = groep.selectAll('rect').data(new_data).join( // omvat de gebeurtenissen met de data \n\n        (enter) => { //  alle data die nog niet gevisualiseerd is en gemaakt moet worden\n\n            const rect_enter = enter.append('rect').attr('x', 0); // zorg dat de bar een <rect> element is die 0 pixels van de x as staat\n            return rect_enter;\n\n        },\n        (update) => update,\n        // wat er gebeurd met de elementen die er al waren\n        (exit) => {\n\n            return exit.remove()\n        }// elementen die verdwenen zijn moeten uit de visualisatie gehaald worden met exit\n\n    );\n\n    rect.transition() // De animatie om soepeler de verandering weer te geven\n        .attr('height', yscale.bandwidth()) // hoe hoog de balk is ten opzichte van de andere data\n        .attr('width', (d) => xscale(d.keer)) // de breedte van de balk\n        .attr('y', (d) => yscale(d.getal)) // de balk kom te staan bij de variabele\n}"]},"metadata":{},"sourceType":"module"}