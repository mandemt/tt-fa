{"ast":null,"code":"// import React from 'react';\n// import * as d3 from 'd3';\n// import data from './data'\n// const Barchart = () => {\n// const margin = { top: 50, bottom: 50, left: 150, right: 50 }; // marges om op de grafiek toe te passen\n// const width = 500 - margin.left - margin.right; // breedte\n// const height = 500 - margin.top - margin.bottom; // hoogte\n// d3.select('select') // selecteer het HTML element <select> (ook wel het filter)\n// let dinges = document.querySelector(\"input\");\n// console.log(dinges)\n// // dinges.addEventListener(\"click\", verander)\n//     function verander() { // als er verandering wordt aangebracht\n//         let count = [] // nieuwe array met alle geselecteerde antwoorden uit de dataset\n//         const counts = [] // nieuwe array met alle getelde geselecteerde antwoorden\n//         var geteldeArray = [] // nieuwe array om met bijbehorende labels zodat ook string gebruikt kan worden\n//         let vraag = this.value // De gefilterde vraag\n//         data.forEach((filter, index) => { // ga door alle regels in het .json bestand heen\n//             const variable = data[index][vraag] // zoek de variabelen die voldoen aan de waarde die is aangegeven in <select>\n//             count.push(variable) // zet alleen deze vragen in een lege array\n//         })\n//         count.forEach(function (x) { // neem elke regel uit deze array appart\n//             counts[x] = (counts[x] || 0) + 1; // voor iedere keer dat iets voorkomt, wordt de waarde +1\n//         });\n//         let getal = Object.keys(counts) // de variabelen\n//         let waarde = Object.values(counts) // de waarden\n//         getal.forEach((x, index) => { // van alle variabelen\n//             const aantal = waarde[index]; // hoevaak het voorkomt is de waarde van de variabele\n//             geteldeArray.push({\n//                 \"getal\": x, \"keer\": aantal // in de nieuwe array wordt de data netjes gepresenteerd\n//             })\n//         })\n//         d3.select('input[type=\"range\"]') //  slider html element\n//             .on('change', function () { // als dit veranderd\n//                 let frequentie = this.value // de geselecteerde frequentie is het nummer in de slider\n//                 const filtered_data = geteldeArray.filter((d) => d.keer >= frequentie) // filter door de array naar variabelen met een .keer boven de frequentie\n//                 update(filtered_data); // gebruik deze data voor de nieuwe bar chart\n//             });\n//         update(geteldeArray) // update met de bijbehorende  data\n//     }\n// const svg = d3.select('main') // selecteer <main> element uit html\n//     .append('svg')  // het canvast voor de bar chart\n//     .attr('width', width + margin.left + margin.right) // de breedte van het svg element\n//     .attr('height', height + margin.top + margin.bottom); // de hoogte van het svg element\n// const groep = svg.append('g')  // maak nieuw group element aan waar alle bars in zitten\n//     .attr('transform', `translate(${margin.left},${margin.top})`); // positionering van het group element\n// const xscale = d3.scaleLinear().range([0, width]); // over hoeveel pixels de bar width verdeeld worden\n// const yscale = d3.scaleBand().rangeRound([0, height]).paddingInner(0.1); // over hoeveel pixels de bar height verdeelt worden met tussenruimte\n// const xaxis = d3.axisTop().scale(xscale); // de horizontale as maken zodat er ook lijnen komen te staan\n// const g_xaxis = groep.append('g').attr('class', 'x axis'); // deze as wordt een group met door d3 geintegreerde elementen zoals ticks en getallen\n// const yaxis = d3.axisLeft().scale(yscale); // de verticale as  met getallen aan de linkerkant\n// const g_yaxis = groep.append('g').attr('class', 'y axis');\n// // Label voor verticale  as\n// svg.append(\"text\")\n//     .attr(\"transform\", \"translate(10,250)rotate(90)\") // 90 graden draaien en aan de zijkant van de bar chart zetten\n//     .style(\"text-anchor\", \"middle\") // tekst moet in het midden staan\n//     .text('Variabele'); // tekst\n// // label voor horizontale as \n// svg.append(\"text\")\n//     .attr(\"transform\", \"translate(300,20)\")\n//     .style(\"text-anchor\", \"middle\")\n//     .text(\"Aantal keer voorgekomen in enquete\");\n// function update(new_data) { // updaten van de data\n//     xscale.domain([0, d3.max(new_data, (d) => d.keer)]); // over welke getallen de bars verdeeld moeten worden\n//     yscale.domain(new_data.map((d) => d.getal)); // hoeveel bars er moeten zijn\n//     g_xaxis.transition().call(xaxis); // soepele overgang en de as aanpassen op de nieuwe data\n//     g_yaxis.transition().call(yaxis);\n//     const rect = groep.selectAll('rect').data(new_data).join( // omvat de gebeurtenissen met de data \n//         (enter) => { //  alle data die nog niet gevisualiseerd is en gemaakt moet worden\n//             const rect_enter = enter.append('rect').attr('x', 0); // zorg dat de bar een <rect> element is die 0 pixels van de x as staat\n//             return rect_enter;\n//         },\n//         (update) => update,\n//         // wat er gebeurd met de elementen die er al waren\n//         (exit) =>{\n//            return exit.remove() \n//         }// elementen die verdwenen zijn moeten uit de visualisatie gehaald worden met exit\n//     );\n//     rect.transition() // De animatie om soepeler de verandering weer te geven\n//         .attr('height', yscale.bandwidth()) // hoe hoog de balk is ten opzichte van de andere data\n//         .attr('width', (d) => xscale(d.keer)) // de breedte van de balk\n//         .attr('y', (d) => yscale(d.getal)) // de balk kom te staan bij de variabele\n//     }\n// return(\n//     <div></div>\n// )\n// }\n// export default Barchart;","map":{"version":3,"sources":["/Users/tomplaneet/Desktop/techtrack/fp/tt-fa/src/components/Barchart.js"],"names":[],"mappings":"AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React from 'react';\n// import * as d3 from 'd3';\n// import data from './data'\n\n// const Barchart = () => {\n// const margin = { top: 50, bottom: 50, left: 150, right: 50 }; // marges om op de grafiek toe te passen\n// const width = 500 - margin.left - margin.right; // breedte\n// const height = 500 - margin.top - margin.bottom; // hoogte\n\n\n// d3.select('select') // selecteer het HTML element <select> (ook wel het filter)\n// let dinges = document.querySelector(\"input\");\n// console.log(dinges)\n// // dinges.addEventListener(\"click\", verander)\n//     function verander() { // als er verandering wordt aangebracht\n//         let count = [] // nieuwe array met alle geselecteerde antwoorden uit de dataset\n//         const counts = [] // nieuwe array met alle getelde geselecteerde antwoorden\n//         var geteldeArray = [] // nieuwe array om met bijbehorende labels zodat ook string gebruikt kan worden\n\n//         let vraag = this.value // De gefilterde vraag\n\n//         data.forEach((filter, index) => { // ga door alle regels in het .json bestand heen\n//             const variable = data[index][vraag] // zoek de variabelen die voldoen aan de waarde die is aangegeven in <select>\n//             count.push(variable) // zet alleen deze vragen in een lege array\n//         })\n\n//         count.forEach(function (x) { // neem elke regel uit deze array appart\n//             counts[x] = (counts[x] || 0) + 1; // voor iedere keer dat iets voorkomt, wordt de waarde +1\n//         });\n\n//         let getal = Object.keys(counts) // de variabelen\n//         let waarde = Object.values(counts) // de waarden\n\n//         getal.forEach((x, index) => { // van alle variabelen\n\n//             const aantal = waarde[index]; // hoevaak het voorkomt is de waarde van de variabele\n\n//             geteldeArray.push({\n//                 \"getal\": x, \"keer\": aantal // in de nieuwe array wordt de data netjes gepresenteerd\n//             })\n//         })\n\n//         d3.select('input[type=\"range\"]') //  slider html element\n//             .on('change', function () { // als dit veranderd\n//                 let frequentie = this.value // de geselecteerde frequentie is het nummer in de slider\n//                 const filtered_data = geteldeArray.filter((d) => d.keer >= frequentie) // filter door de array naar variabelen met een .keer boven de frequentie\n//                 update(filtered_data); // gebruik deze data voor de nieuwe bar chart\n//             });\n\n//         update(geteldeArray) // update met de bijbehorende  data\n//     }\n  \n\n// const svg = d3.select('main') // selecteer <main> element uit html\n//     .append('svg')  // het canvast voor de bar chart\n//     .attr('width', width + margin.left + margin.right) // de breedte van het svg element\n//     .attr('height', height + margin.top + margin.bottom); // de hoogte van het svg element\n\n// const groep = svg.append('g')  // maak nieuw group element aan waar alle bars in zitten\n//     .attr('transform', `translate(${margin.left},${margin.top})`); // positionering van het group element\n\n// const xscale = d3.scaleLinear().range([0, width]); // over hoeveel pixels de bar width verdeeld worden\n// const yscale = d3.scaleBand().rangeRound([0, height]).paddingInner(0.1); // over hoeveel pixels de bar height verdeelt worden met tussenruimte\n\n// const xaxis = d3.axisTop().scale(xscale); // de horizontale as maken zodat er ook lijnen komen te staan\n// const g_xaxis = groep.append('g').attr('class', 'x axis'); // deze as wordt een group met door d3 geintegreerde elementen zoals ticks en getallen\n\n// const yaxis = d3.axisLeft().scale(yscale); // de verticale as  met getallen aan de linkerkant\n// const g_yaxis = groep.append('g').attr('class', 'y axis');\n\n// // Label voor verticale  as\n// svg.append(\"text\")\n//     .attr(\"transform\", \"translate(10,250)rotate(90)\") // 90 graden draaien en aan de zijkant van de bar chart zetten\n//     .style(\"text-anchor\", \"middle\") // tekst moet in het midden staan\n//     .text('Variabele'); // tekst\n\n\n// // label voor horizontale as \n// svg.append(\"text\")\n//     .attr(\"transform\", \"translate(300,20)\")\n//     .style(\"text-anchor\", \"middle\")\n//     .text(\"Aantal keer voorgekomen in enquete\");\n\n// function update(new_data) { // updaten van de data\n\n//     xscale.domain([0, d3.max(new_data, (d) => d.keer)]); // over welke getallen de bars verdeeld moeten worden\n//     yscale.domain(new_data.map((d) => d.getal)); // hoeveel bars er moeten zijn\n//     g_xaxis.transition().call(xaxis); // soepele overgang en de as aanpassen op de nieuwe data\n//     g_yaxis.transition().call(yaxis);\n\n//     const rect = groep.selectAll('rect').data(new_data).join( // omvat de gebeurtenissen met de data \n\n//         (enter) => { //  alle data die nog niet gevisualiseerd is en gemaakt moet worden\n\n//             const rect_enter = enter.append('rect').attr('x', 0); // zorg dat de bar een <rect> element is die 0 pixels van de x as staat\n//             return rect_enter;\n\n//         },\n//         (update) => update,\n//         // wat er gebeurd met de elementen die er al waren\n//         (exit) =>{\n\n//            return exit.remove() \n//         }// elementen die verdwenen zijn moeten uit de visualisatie gehaald worden met exit\n\n//     );\n//     rect.transition() // De animatie om soepeler de verandering weer te geven\n//         .attr('height', yscale.bandwidth()) // hoe hoog de balk is ten opzichte van de andere data\n//         .attr('width', (d) => xscale(d.keer)) // de breedte van de balk\n//         .attr('y', (d) => yscale(d.getal)) // de balk kom te staan bij de variabele\n//     }\n// return(\n//     <div></div>\n// )\n// }\n\n// export default Barchart;"]},"metadata":{},"sourceType":"module"}