{"ast":null,"code":"import React from 'react';\nimport * as d3 from 'd3';\nimport data from './data';\n\nconst Barchart = () => {\n  const margin = {\n    top: 50,\n    bottom: 50,\n    left: 150,\n    right: 50\n  }; // marges om op de grafiek toe te passen\n\n  const width = 500 - margin.left - margin.right; // breedte\n\n  const height = 500 - margin.top - margin.bottom; // hoogte\n\n  d3.select('select'); // selecteer het HTML element <select> (ook wel het filter)\n\n  let dinges = document.querySelector(\"input\");\n  console.log(dinges); // dinges.addEventListener(\"click\", verander)\n\n  function verander() {\n    // als er verandering wordt aangebracht\n    let count = []; // nieuwe array met alle geselecteerde antwoorden uit de dataset\n\n    const counts = []; // nieuwe array met alle getelde geselecteerde antwoorden\n\n    var geteldeArray = []; // nieuwe array om met bijbehorende labels zodat ook string gebruikt kan worden\n\n    let vraag = this.value; // De gefilterde vraag\n\n    data.forEach((filter, index) => {\n      // ga door alle regels in het .json bestand heen\n      const variable = data[index][vraag]; // zoek de variabelen die voldoen aan de waarde die is aangegeven in <select>\n\n      count.push(variable); // zet alleen deze vragen in een lege array\n    });\n    count.forEach(function (x) {\n      // neem elke regel uit deze array appart\n      counts[x] = (counts[x] || 0) + 1; // voor iedere keer dat iets voorkomt, wordt de waarde +1\n    });\n    let getal = Object.keys(counts); // de variabelen\n\n    let waarde = Object.values(counts); // de waarden\n\n    getal.forEach((x, index) => {\n      // van alle variabelen\n      const aantal = waarde[index]; // hoevaak het voorkomt is de waarde van de variabele\n\n      geteldeArray.push({\n        \"getal\": x,\n        \"keer\": aantal // in de nieuwe array wordt de data netjes gepresenteerd\n\n      });\n    });\n    d3.select('input[type=\"range\"]') //  slider html element\n    .on('change', function () {\n      // als dit veranderd\n      let frequentie = this.value; // de geselecteerde frequentie is het nummer in de slider\n\n      const filtered_data = geteldeArray.filter(d => d.keer >= frequentie); // filter door de array naar variabelen met een .keer boven de frequentie\n\n      update(filtered_data); // gebruik deze data voor de nieuwe bar chart\n    });\n    update(geteldeArray); // update met de bijbehorende  data\n  }\n\n  const svg = d3.select('main') // selecteer <main> element uit html\n  .append('svg') // het canvast voor de bar chart\n  .attr('width', width + margin.left + margin.right) // de breedte van het svg element\n  .attr('height', height + margin.top + margin.bottom); // de hoogte van het svg element\n\n  const groep = svg.append('g') // maak nieuw group element aan waar alle bars in zitten\n  .attr('transform', `translate(${margin.left},${margin.top})`); // positionering van het group element\n\n  const xscale = d3.scaleLinear().range([0, width]); // over hoeveel pixels de bar width verdeeld worden\n\n  const yscale = d3.scaleBand().rangeRound([0, height]).paddingInner(0.1); // over hoeveel pixels de bar height verdeelt worden met tussenruimte\n\n  const xaxis = d3.axisTop().scale(xscale); // de horizontale as maken zodat er ook lijnen komen te staan\n\n  const g_xaxis = groep.append('g').attr('class', 'x axis'); // deze as wordt een group met door d3 geintegreerde elementen zoals ticks en getallen\n\n  const yaxis = d3.axisLeft().scale(yscale); // de verticale as  met getallen aan de linkerkant\n\n  const g_yaxis = groep.append('g').attr('class', 'y axis'); // Label voor verticale  as\n\n  svg.append(\"text\").attr(\"transform\", \"translate(10,250)rotate(90)\") // 90 graden draaien en aan de zijkant van de bar chart zetten\n  .style(\"text-anchor\", \"middle\") // tekst moet in het midden staan\n  .text('Variabele'); // tekst\n  // label voor horizontale as \n\n  svg.append(\"text\").attr(\"transform\", \"translate(300,20)\").style(\"text-anchor\", \"middle\").text(\"Aantal keer voorgekomen in enquete\");\n\n  function update(new_data) {\n    // updaten van de data\n    xscale.domain([0, d3.max(new_data, d => d.keer)]); // over welke getallen de bars verdeeld moeten worden\n\n    yscale.domain(new_data.map(d => d.getal)); // hoeveel bars er moeten zijn\n\n    g_xaxis.transition().call(xaxis); // soepele overgang en de as aanpassen op de nieuwe data\n\n    g_yaxis.transition().call(yaxis);\n    const rect = groep.selectAll('rect').data(new_data).join( // omvat de gebeurtenissen met de data \n    enter => {\n      //  alle data die nog niet gevisualiseerd is en gemaakt moet worden\n      const rect_enter = enter.append('rect').attr('x', 0); // zorg dat de bar een <rect> element is die 0 pixels van de x as staat\n\n      return rect_enter;\n    }, update => update, // wat er gebeurd met de elementen die er al waren\n    exit => {\n      return exit.remove();\n    } // elementen die verdwenen zijn moeten uit de visualisatie gehaald worden met exit\n    );\n    rect.transition() // De animatie om soepeler de verandering weer te geven\n    .attr('height', yscale.bandwidth()) // hoe hoog de balk is ten opzichte van de andere data\n    .attr('width', d => xscale(d.keer)) // de breedte van de balk\n    .attr('y', d => yscale(d.getal)); // de balk kom te staan bij de variabele\n  }\n};\n\n_c = Barchart;\nexport default Barchart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Barchart\");","map":{"version":3,"sources":["/Users/tomplaneet/Desktop/techtrack/fp/tt-fa/src/components/Barchart.js"],"names":["React","d3","data","Barchart","margin","top","bottom","left","right","width","height","select","dinges","document","querySelector","console","log","verander","count","counts","geteldeArray","vraag","value","forEach","filter","index","variable","push","x","getal","Object","keys","waarde","values","aantal","on","frequentie","filtered_data","d","keer","update","svg","append","attr","groep","xscale","scaleLinear","range","yscale","scaleBand","rangeRound","paddingInner","xaxis","axisTop","scale","g_xaxis","yaxis","axisLeft","g_yaxis","style","text","new_data","domain","max","map","transition","call","rect","selectAll","join","enter","rect_enter","exit","remove","bandwidth"],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as d3 from 'd3';\nimport data from './data'\n\nconst Barchart = () => {\n    const margin = { top: 50, bottom: 50, left: 150, right: 50 }; // marges om op de grafiek toe te passen\nconst width = 500 - margin.left - margin.right; // breedte\nconst height = 500 - margin.top - margin.bottom; // hoogte\n\n\nd3.select('select') // selecteer het HTML element <select> (ook wel het filter)\nlet dinges = document.querySelector(\"input\");\nconsole.log(dinges)\n// dinges.addEventListener(\"click\", verander)\n    function verander() { // als er verandering wordt aangebracht\n        let count = [] // nieuwe array met alle geselecteerde antwoorden uit de dataset\n        const counts = [] // nieuwe array met alle getelde geselecteerde antwoorden\n        var geteldeArray = [] // nieuwe array om met bijbehorende labels zodat ook string gebruikt kan worden\n\n        let vraag = this.value // De gefilterde vraag\n\n        data.forEach((filter, index) => { // ga door alle regels in het .json bestand heen\n            const variable = data[index][vraag] // zoek de variabelen die voldoen aan de waarde die is aangegeven in <select>\n            count.push(variable) // zet alleen deze vragen in een lege array\n        })\n\n        count.forEach(function (x) { // neem elke regel uit deze array appart\n            counts[x] = (counts[x] || 0) + 1; // voor iedere keer dat iets voorkomt, wordt de waarde +1\n        });\n\n        let getal = Object.keys(counts) // de variabelen\n        let waarde = Object.values(counts) // de waarden\n\n        getal.forEach((x, index) => { // van alle variabelen\n\n            const aantal = waarde[index]; // hoevaak het voorkomt is de waarde van de variabele\n\n            geteldeArray.push({\n                \"getal\": x, \"keer\": aantal // in de nieuwe array wordt de data netjes gepresenteerd\n            })\n        })\n\n        d3.select('input[type=\"range\"]') //  slider html element\n            .on('change', function () { // als dit veranderd\n                let frequentie = this.value // de geselecteerde frequentie is het nummer in de slider\n                const filtered_data = geteldeArray.filter((d) => d.keer >= frequentie) // filter door de array naar variabelen met een .keer boven de frequentie\n                update(filtered_data); // gebruik deze data voor de nieuwe bar chart\n            });\n\n        update(geteldeArray) // update met de bijbehorende  data\n    }\n  \n\nconst svg = d3.select('main') // selecteer <main> element uit html\n    .append('svg')  // het canvast voor de bar chart\n    .attr('width', width + margin.left + margin.right) // de breedte van het svg element\n    .attr('height', height + margin.top + margin.bottom); // de hoogte van het svg element\n\nconst groep = svg.append('g')  // maak nieuw group element aan waar alle bars in zitten\n    .attr('transform', `translate(${margin.left},${margin.top})`); // positionering van het group element\n\nconst xscale = d3.scaleLinear().range([0, width]); // over hoeveel pixels de bar width verdeeld worden\nconst yscale = d3.scaleBand().rangeRound([0, height]).paddingInner(0.1); // over hoeveel pixels de bar height verdeelt worden met tussenruimte\n\nconst xaxis = d3.axisTop().scale(xscale); // de horizontale as maken zodat er ook lijnen komen te staan\nconst g_xaxis = groep.append('g').attr('class', 'x axis'); // deze as wordt een group met door d3 geintegreerde elementen zoals ticks en getallen\n\nconst yaxis = d3.axisLeft().scale(yscale); // de verticale as  met getallen aan de linkerkant\nconst g_yaxis = groep.append('g').attr('class', 'y axis');\n\n// Label voor verticale  as\nsvg.append(\"text\")\n    .attr(\"transform\", \"translate(10,250)rotate(90)\") // 90 graden draaien en aan de zijkant van de bar chart zetten\n    .style(\"text-anchor\", \"middle\") // tekst moet in het midden staan\n    .text('Variabele'); // tekst\n\n\n// label voor horizontale as \nsvg.append(\"text\")\n    .attr(\"transform\", \"translate(300,20)\")\n    .style(\"text-anchor\", \"middle\")\n    .text(\"Aantal keer voorgekomen in enquete\");\n\nfunction update(new_data) { // updaten van de data\n\n    xscale.domain([0, d3.max(new_data, (d) => d.keer)]); // over welke getallen de bars verdeeld moeten worden\n    yscale.domain(new_data.map((d) => d.getal)); // hoeveel bars er moeten zijn\n    g_xaxis.transition().call(xaxis); // soepele overgang en de as aanpassen op de nieuwe data\n    g_yaxis.transition().call(yaxis);\n\n    const rect = groep.selectAll('rect').data(new_data).join( // omvat de gebeurtenissen met de data \n\n        (enter) => { //  alle data die nog niet gevisualiseerd is en gemaakt moet worden\n\n            const rect_enter = enter.append('rect').attr('x', 0); // zorg dat de bar een <rect> element is die 0 pixels van de x as staat\n            return rect_enter;\n\n        },\n        (update) => update,\n        // wat er gebeurd met de elementen die er al waren\n        (exit) =>{\n\n           return exit.remove() \n        }// elementen die verdwenen zijn moeten uit de visualisatie gehaald worden met exit\n\n    );\n    rect.transition() // De animatie om soepeler de verandering weer te geven\n        .attr('height', yscale.bandwidth()) // hoe hoog de balk is ten opzichte van de andere data\n        .attr('width', (d) => xscale(d.keer)) // de breedte van de balk\n        .attr('y', (d) => yscale(d.getal)) // de balk kom te staan bij de variabele\n    }\n\n}\nexport default Barchart;"]},"metadata":{},"sourceType":"module"}