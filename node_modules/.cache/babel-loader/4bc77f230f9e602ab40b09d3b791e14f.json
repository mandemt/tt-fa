{"ast":null,"code":"import React, { Component } from 'react';\nimport data from './data';\nimport * as d3 from 'd3';\nexport function halloDaar() {\n  const margin = {\n    top: 50,\n    bottom: 50,\n    left: 150,\n    right: 50\n  }; // marges om op de grafiek toe te passen\n\n  const width = 500 - margin.left - margin.right; // breedte\n\n  const height = 500 - margin.top - margin.bottom; // hoogte\n\n  const svg = d3.select('main') // selecteer <main> element uit html\n  .append('svg') // het canvas voor de bar chart\n  .attr('width', width + margin.left + margin.right) // de breedte van het svg element\n  .attr('height', height + margin.top + margin.bottom); // de hoogte van het svg element\n\n  const groep = svg.append('g') // maak nieuw group element aan waar alle bars in zitten\n  .attr('transform', `translate(${margin.left},${margin.top})`); // positionering van het group element\n\n  svg.append(\"text\").attr(\"transform\", \"translate(10,250)rotate(90)\") // 90 graden draaien en aan de zijkant van de bar chart zetten\n  .style(\"text-anchor\", \"middle\") // tekst moet in het midden staan\n  .text('Variabele'); // tekst\n\n  svg.append(\"text\").attr(\"transform\", \"translate(300,20)\").style(\"text-anchor\", \"middle\").text(\"Aantal keer voorgekomen in enquete\");\n  const xscale = d3.scaleLinear().range([0, width]); // over hoeveel pixels de bar width verdeeld worden\n\n  const yscale = d3.scaleBand().rangeRound([0, height]).paddingInner(0.1); // over hoeveel pixels de bar height verdeelt worden met tussenruimte\n\n  const xaxis = d3.axisTop().scale(xscale); // de horizontale as maken zodat er ook lijnen komen te staan\n\n  const g_xaxis = groep.append('g').attr('class', 'x axis'); // deze as wordt een group met door d3 geintegreerde elementen zoals ticks en getallen\n\n  const yaxis = d3.axisLeft().scale(yscale); // de verticale as  met getallen aan de linkerkant\n\n  const g_yaxis = groep.append('g').attr('class', 'y axis');\n  d3.select('select') // selecteer het HTML element <select> (ook wel het filter)\n  .on('change', function () {\n    // als er verandering wordt aangebracht\n    telData(this.value);\n  });\n\n  let counts = function telData(invoer) {\n    let count = []; // nieuwe array met alle geselecteerde antwoorden uit de dataset\n\n    const counts = []; // nieuwe array met alle getelde geselecteerde antwoorden\n\n    data.forEach((filter, index) => {\n      // ga door alle regels in het .json bestand heen\n      const variable = data[index][invoer]; // zoek de variabelen die voldoen aan de waarde die is aangegeven in <select>\n\n      count.push(variable); // zet alleen deze vragen in een lege array\n    });\n    count.forEach(function (x) {\n      // neem elke regel uit deze array appart\n      counts[x] = (counts[x] || 0) + 1; // voor iedere keer dat iets voorkomt, wordt de waarde +1\n    });\n    netteData(counts);\n  };\n\n  function netteData(counts) {\n    let geteldeArray = []; // nieuwe array om met bijbehorende labels zodat ook string gebruikt kan worden\n\n    let getal = Object.keys(counts); // de variabelen\n\n    let waarde = Object.values(counts); // de waarden\n\n    getal.forEach((x, index) => {\n      // van alle variabelen\n      const aantal = waarde[index]; // hoevaak het voorkomt is de waarde van de variabele\n\n      geteldeArray.push({\n        \"getal\": x,\n        \"keer\": aantal // in de nieuwe array wordt de data netjes gepresenteerd\n\n      });\n    });\n    update(geteldeArray); // update met de bijbehorende  data\n\n    d3.select('input[type=\"range\"]') //  slider html element\n    .on('change', function () {\n      // als dit veranderd\n      filterData(this.value, geteldeArray);\n    });\n  }\n\n  function filterData(bereik, arr) {\n    const filtered_data = arr.filter(d => d.keer >= bereik); // filter door de array naar variabelen met een .keer boven de frequentie\n\n    update(filtered_data); // gebruik deze data voor de nieuwe bar chart\n  }\n\n  function update(new_data) {\n    // updaten van de data\n    xscale.domain([0, d3.max(new_data, d => d.keer)]); // over welke getallen de bars verdeeld moeten worden\n\n    yscale.domain(new_data.map(d => d.getal)); // hoeveel bars er moeten zijn\n\n    g_xaxis.transition().call(xaxis); // soepele overgang en de as aanpassen op de nieuwe data\n\n    g_yaxis.transition().call(yaxis);\n    const rect = groep.selectAll('rect').data(new_data).join( // omvat de gebeurtenissen met de data \n    enter => {\n      //  alle data die nog niet gevisualiseerd is en gemaakt moet worden\n      const rect_enter = enter.append('rect').attr('x', 0); // zorg dat de bar een <rect> element is die 0 pixels van de x as staat\n\n      return rect_enter;\n    }, update => update, // wat er gebeurd met de elementen die er al waren\n    exit => {\n      return exit.remove();\n    } // elementen die verdwenen zijn moeten uit de visualisatie gehaald worden met exit\n    );\n    rect.transition() // De animatie om soepeler de verandering weer te geven\n    .attr('height', yscale.bandwidth()) // hoe hoog de balk is ten opzichte van de andere data\n    .attr('width', d => xscale(d.keer)) // de breedte van de balk\n    .attr('y', d => yscale(d.getal)); // de balk kom te staan bij de variabele\n  }\n}","map":{"version":3,"sources":["/Users/tomplaneet/Desktop/techtrack/fp/tt-fa/src/components/teldata.js"],"names":["React","Component","data","d3","halloDaar","margin","top","bottom","left","right","width","height","svg","select","append","attr","groep","style","text","xscale","scaleLinear","range","yscale","scaleBand","rangeRound","paddingInner","xaxis","axisTop","scale","g_xaxis","yaxis","axisLeft","g_yaxis","on","telData","value","counts","invoer","count","forEach","filter","index","variable","push","x","netteData","geteldeArray","getal","Object","keys","waarde","values","aantal","update","filterData","bereik","arr","filtered_data","d","keer","new_data","domain","max","map","transition","call","rect","selectAll","join","enter","rect_enter","exit","remove","bandwidth"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport data from './data'\nimport * as d3 from 'd3';\nexport function halloDaar() {\n    const margin = { top: 50, bottom: 50, left: 150, right: 50 }; // marges om op de grafiek toe te passen\n    const width = 500 - margin.left - margin.right; // breedte\n    const height = 500 - margin.top - margin.bottom; // hoogte\n    const svg = d3.select('main') // selecteer <main> element uit html\n        .append('svg')  // het canvas voor de bar chart\n        .attr('width', width + margin.left + margin.right) // de breedte van het svg element\n        .attr('height', height + margin.top + margin.bottom); // de hoogte van het svg element\n\n    const groep = svg.append('g')  // maak nieuw group element aan waar alle bars in zitten\n        .attr('transform', `translate(${margin.left},${margin.top})`); // positionering van het group element\n\n    svg.append(\"text\")\n        .attr(\"transform\", \"translate(10,250)rotate(90)\") // 90 graden draaien en aan de zijkant van de bar chart zetten\n        .style(\"text-anchor\", \"middle\") // tekst moet in het midden staan\n        .text('Variabele'); // tekst\n\n    svg.append(\"text\")\n        .attr(\"transform\", \"translate(300,20)\")\n        .style(\"text-anchor\", \"middle\")\n        .text(\"Aantal keer voorgekomen in enquete\");\n\n\n    const xscale = d3.scaleLinear().range([0, width]); // over hoeveel pixels de bar width verdeeld worden\n    const yscale = d3.scaleBand().rangeRound([0, height]).paddingInner(0.1); // over hoeveel pixels de bar height verdeelt worden met tussenruimte\n\n    const xaxis = d3.axisTop().scale(xscale); // de horizontale as maken zodat er ook lijnen komen te staan\n    const g_xaxis = groep.append('g').attr('class', 'x axis'); // deze as wordt een group met door d3 geintegreerde elementen zoals ticks en getallen\n\n    const yaxis = d3.axisLeft().scale(yscale); // de verticale as  met getallen aan de linkerkant\n    const g_yaxis = groep.append('g').attr('class', 'y axis');\n\n\n    d3.select('select') // selecteer het HTML element <select> (ook wel het filter)\n        .on('change', function () { // als er verandering wordt aangebracht\n            telData(this.value)\n        })\n\n\n    let counts = function telData(invoer) {\n        let count = [] // nieuwe array met alle geselecteerde antwoorden uit de dataset\n        const counts = [] // nieuwe array met alle getelde geselecteerde antwoorden\n\n        data.forEach((filter, index) => { // ga door alle regels in het .json bestand heen\n            const variable = data[index][invoer] // zoek de variabelen die voldoen aan de waarde die is aangegeven in <select>\n            count.push(variable) // zet alleen deze vragen in een lege array\n        })\n\n        count.forEach(function (x) { // neem elke regel uit deze array appart\n            counts[x] = (counts[x] || 0) + 1; // voor iedere keer dat iets voorkomt, wordt de waarde +1\n        });\nnetteData(counts)\n    }\n\n    function netteData(counts) {\n        let geteldeArray = [] // nieuwe array om met bijbehorende labels zodat ook string gebruikt kan worden\n\n        let getal = Object.keys(counts) // de variabelen\n        let waarde = Object.values(counts) // de waarden\n\n        getal.forEach((x, index) => { // van alle variabelen\n\n            const aantal = waarde[index]; // hoevaak het voorkomt is de waarde van de variabele\n\n            geteldeArray.push({\n                \"getal\": x, \"keer\": aantal // in de nieuwe array wordt de data netjes gepresenteerd\n            })\n        })\n        update(geteldeArray) // update met de bijbehorende  data\n\n        d3.select('input[type=\"range\"]') //  slider html element\n            .on('change', function () { // als dit veranderd\n                filterData(this.value, geteldeArray)\n            });\n    }\n\n\n    function filterData(bereik, arr) {\n        const filtered_data = arr.filter((d) => d.keer >= bereik) // filter door de array naar variabelen met een .keer boven de frequentie\n        update(filtered_data); // gebruik deze data voor de nieuwe bar chart\n    }\n\n\nfunction update(new_data) { // updaten van de data\n\n    xscale.domain([0, d3.max(new_data, (d) => d.keer)]); // over welke getallen de bars verdeeld moeten worden\n    yscale.domain(new_data.map((d) => d.getal)); // hoeveel bars er moeten zijn\n    g_xaxis.transition().call(xaxis); // soepele overgang en de as aanpassen op de nieuwe data\n    g_yaxis.transition().call(yaxis);\n\n    const rect = groep.selectAll('rect').data(new_data).join( // omvat de gebeurtenissen met de data \n\n        (enter) => { //  alle data die nog niet gevisualiseerd is en gemaakt moet worden\n\n            const rect_enter = enter.append('rect').attr('x', 0); // zorg dat de bar een <rect> element is die 0 pixels van de x as staat\n            return rect_enter;\n\n        },\n        (update) => update,\n        // wat er gebeurd met de elementen die er al waren\n        (exit) => {\n\n            return exit.remove()\n        }// elementen die verdwenen zijn moeten uit de visualisatie gehaald worden met exit\n\n    );\n\n    rect.transition() // De animatie om soepeler de verandering weer te geven\n        .attr('height', yscale.bandwidth()) // hoe hoog de balk is ten opzichte van de andere data\n        .attr('width', (d) => xscale(d.keer)) // de breedte van de balk\n        .attr('y', (d) => yscale(d.getal)) // de balk kom te staan bij de variabele\n}\n}"]},"metadata":{},"sourceType":"module"}