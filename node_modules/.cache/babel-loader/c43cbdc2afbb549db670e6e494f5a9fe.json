{"ast":null,"code":"import * as d3 from 'd3';\nconst margin = {\n  top: 50,\n  bottom: 50,\n  left: 150,\n  right: 50\n}; // marges om op de grafiek toe te passen\n\nconst width = 500 - margin.left - margin.right; // breedte\n\nconst height = 500 - margin.top - margin.bottom; // hoogte\n\nconst svg = d3.select('main') // selecteer <main> element uit html\n.append('svg') // het canvas voor de bar chart\n.attr('width', width + margin.left + margin.right) // de breedte van het svg element\n.attr('height', height + margin.top + margin.bottom); // de hoogte van het svg element\n\nconst groep = svg.append('g') // maak nieuw group element aan waar alle bars in zitten\n.attr('transform', `translate(${margin.left},${margin.top})`); // positionering van het group element\n\nconst xscale = d3.scaleLinear().range([0, width]); // over hoeveel pixels de bar width verdeeld worden\n\nconst yscale = d3.scaleBand().rangeRound([0, height]).paddingInner(0.1); // over hoeveel pixels de bar height verdeelt worden met tussenruimte\n\nconst xaxis = d3.axisTop().scale(xscale); // de horizontale as maken zodat er ook lijnen komen te staan\n\nconst g_xaxis = groep.append('g').attr('class', 'x axis'); // deze as wordt een group met door d3 geintegreerde elementen zoals ticks en getallen\n\nconst yaxis = d3.axisLeft().scale(yscale); // de verticale as  met getallen aan de linkerkant\n\nconst g_yaxis = groep.append('g').attr('class', 'y axis');\nexport function update(new_data) {\n  // updaten van de data\n  xscale.domain([0, d3.max(new_data, d => d.keer)]); // over welke getallen de bars verdeeld moeten worden\n\n  yscale.domain(new_data.map(d => d.getal)); // hoeveel bars er moeten zijn\n\n  g_xaxis.transition().call(xaxis); // soepele overgang en de as aanpassen op de nieuwe data\n\n  g_yaxis.transition().call(yaxis);\n  const rect = groep.selectAll('rect').data(new_data).join( // omvat de gebeurtenissen met de data \n  enter => {\n    //  alle data die nog niet gevisualiseerd is en gemaakt moet worden\n    const rect_enter = enter.append('rect').attr('x', 0); // zorg dat de bar een <rect> element is die 0 pixels van de x as staat\n\n    return rect_enter;\n  }, update => update, // wat er gebeurd met de elementen die er al waren\n  exit => {\n    return exit.remove();\n  } // elementen die verdwenen zijn moeten uit de visualisatie gehaald worden met exit\n  );\n  rect.transition() // De animatie om soepeler de verandering weer te geven\n  .attr('height', yscale.bandwidth()) // hoe hoog de balk is ten opzichte van de andere data\n  .attr('width', d => xscale(d.keer)) // de breedte van de balk\n  .attr('y', d => yscale(d.getal)); // de balk kom te staan bij de variabele\n}","map":{"version":3,"sources":["/Users/tomplaneet/Desktop/techtrack/fp/tt-fa/src/components/updateData.js"],"names":["d3","margin","top","bottom","left","right","width","height","svg","select","append","attr","groep","xscale","scaleLinear","range","yscale","scaleBand","rangeRound","paddingInner","xaxis","axisTop","scale","g_xaxis","yaxis","axisLeft","g_yaxis","update","new_data","domain","max","d","keer","map","getal","transition","call","rect","selectAll","data","join","enter","rect_enter","exit","remove","bandwidth"],"mappings":"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","sourcesContent":["import * as d3 from 'd3';\nconst margin = { top: 50, bottom: 50, left: 150, right: 50 }; // marges om op de grafiek toe te passen\nconst width = 500 - margin.left - margin.right; // breedte\nconst height = 500 - margin.top - margin.bottom; // hoogte\nconst svg = d3.select('main') // selecteer <main> element uit html\n     .append('svg')  // het canvas voor de bar chart\n     .attr('width', width + margin.left + margin.right) // de breedte van het svg element\n     .attr('height', height + margin.top + margin.bottom); // de hoogte van het svg element\nconst groep = svg.append('g')  // maak nieuw group element aan waar alle bars in zitten\n.attr('transform', `translate(${margin.left},${margin.top})`); // positionering van het group element\n\n     const xscale = d3.scaleLinear().range([0, width]); // over hoeveel pixels de bar width verdeeld worden\n     const yscale = d3.scaleBand().rangeRound([0, height]).paddingInner(0.1); // over hoeveel pixels de bar height verdeelt worden met tussenruimte\n \n     const xaxis = d3.axisTop().scale(xscale); // de horizontale as maken zodat er ook lijnen komen te staan\n     const g_xaxis = groep.append('g').attr('class', 'x axis'); // deze as wordt een group met door d3 geintegreerde elementen zoals ticks en getallen\n \n     const yaxis = d3.axisLeft().scale(yscale); // de verticale as  met getallen aan de linkerkant\n     const g_yaxis = groep.append('g').attr('class', 'y axis');\n \n     \n\n\nexport function update(new_data) { // updaten van de data\n    \n    xscale.domain([0, d3.max(new_data, (d) => d.keer)]); // over welke getallen de bars verdeeld moeten worden\n    yscale.domain(new_data.map((d) => d.getal)); // hoeveel bars er moeten zijn\n    g_xaxis.transition().call(xaxis); // soepele overgang en de as aanpassen op de nieuwe data\n    g_yaxis.transition().call(yaxis);\n\n    const rect = groep.selectAll('rect').data(new_data).join( // omvat de gebeurtenissen met de data \n\n        (enter) => { //  alle data die nog niet gevisualiseerd is en gemaakt moet worden\n\n            const rect_enter = enter.append('rect').attr('x', 0); // zorg dat de bar een <rect> element is die 0 pixels van de x as staat\n            return rect_enter;\n\n        },\n        (update) => update,\n        // wat er gebeurd met de elementen die er al waren\n        (exit) => {\n\n            return exit.remove()\n        }// elementen die verdwenen zijn moeten uit de visualisatie gehaald worden met exit\n\n    );\n\n    rect.transition() // De animatie om soepeler de verandering weer te geven\n        .attr('height', yscale.bandwidth()) // hoe hoog de balk is ten opzichte van de andere data\n        .attr('width', (d) => xscale(d.keer)) // de breedte van de balk\n        .attr('y', (d) => yscale(d.getal)) // de balk kom te staan bij de variabele\n}"]},"metadata":{},"sourceType":"module"}