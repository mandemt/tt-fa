{"ast":null,"code":"var _jsxFileName = \"/Users/tomplaneet/Desktop/techtrack/fp/tt-fa/src/components/Home.js\";\nimport React, { Component } from 'react'; // import logo from './logo.svg';\n\nimport './App.css'; // import Barchart from './components/Barchart.js'\n\nimport * as d3 from 'd3';\nimport { BrowserRouter as Router, Route, Link, Routes as Switch } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Home extends Component {\n  render() {\n    const margin = {\n      top: 50,\n      bottom: 50,\n      left: 150,\n      right: 50\n    }; // marges om op de grafiek toe te passen\n\n    const width = 500 - margin.left - margin.right; // breedte\n\n    const height = 500 - margin.top - margin.bottom; // hoogte\n\n    const svg = d3.select('main') // selecteer <main> element uit html\n    .append('svg') // het canvas voor de bar chart\n    .attr('width', width + margin.left + margin.right) // de breedte van het svg element\n    .attr('height', height + margin.top + margin.bottom); // de hoogte van het svg element\n\n    const groep = svg.append('g') // maak nieuw group element aan waar alle bars in zitten\n    .attr('transform', `translate(${margin.left},${margin.top})`); // positionering van het group element\n\n    svg.append(\"text\").attr(\"transform\", \"translate(10,250)rotate(90)\") // 90 graden draaien en aan de zijkant van de bar chart zetten\n    .style(\"text-anchor\", \"middle\") // tekst moet in het midden staan\n    .text('Variabele'); // tekst\n\n    svg.append(\"text\").attr(\"transform\", \"translate(300,20)\").style(\"text-anchor\", \"middle\").text(\"Aantal keer voorgekomen in enquete\");\n    const xscale = d3.scaleLinear().range([0, width]); // over hoeveel pixels de bar width verdeeld worden\n\n    const yscale = d3.scaleBand().rangeRound([0, height]).paddingInner(0.1); // over hoeveel pixels de bar height verdeelt worden met tussenruimte\n\n    const xaxis = d3.axisTop().scale(xscale); // de horizontale as maken zodat er ook lijnen komen te staan\n\n    const g_xaxis = groep.append('g').attr('class', 'x axis'); // deze as wordt een group met door d3 geintegreerde elementen zoals ticks en getallen\n\n    const yaxis = d3.axisLeft().scale(yscale); // de verticale as  met getallen aan de linkerkant\n\n    const g_yaxis = groep.append('g').attr('class', 'y axis');\n    d3.select('select') // selecteer het HTML element <select> (ook wel het filter)\n    .on('change', function () {\n      // als er verandering wordt aangebracht\n      telData(this.value);\n    });\n\n    function telData(invoer) {\n      let count = []; // nieuwe array met alle geselecteerde antwoorden uit de dataset\n\n      const counts = []; // nieuwe array met alle getelde geselecteerde antwoorden\n\n      data.forEach((filter, index) => {\n        // ga door alle regels in het .json bestand heen\n        const variable = data[index][invoer]; // zoek de variabelen die voldoen aan de waarde die is aangegeven in <select>\n\n        count.push(variable); // zet alleen deze vragen in een lege array\n      });\n      count.forEach(function (x) {\n        // neem elke regel uit deze array appart\n        counts[x] = (counts[x] || 0) + 1; // voor iedere keer dat iets voorkomt, wordt de waarde +1\n      });\n      netteData(counts);\n    }\n\n    function netteData(counts) {\n      let geteldeArray = []; // nieuwe array om met bijbehorende labels zodat ook string gebruikt kan worden\n\n      let getal = Object.keys(counts); // de variabelen\n\n      let waarde = Object.values(counts); // de waarden\n\n      getal.forEach((x, index) => {\n        // van alle variabelen\n        const aantal = waarde[index]; // hoevaak het voorkomt is de waarde van de variabele\n\n        geteldeArray.push({\n          \"getal\": x,\n          \"keer\": aantal // in de nieuwe array wordt de data netjes gepresenteerd\n\n        });\n      });\n      update(geteldeArray); // update met de bijbehorende  data\n\n      d3.select('input[type=\"range\"]') //  slider html element\n      .on('change', function () {\n        // als dit veranderd\n        filterData(this.value, geteldeArray);\n      });\n    }\n\n    function filterData(bereik, arr) {\n      const filtered_data = arr.filter(d => d.keer >= bereik); // filter door de array naar variabelen met een .keer boven de frequentie\n\n      update(filtered_data); // gebruik deze data voor de nieuwe bar chart\n    }\n\n    function update(new_data) {\n      // updaten van de data\n      xscale.domain([0, d3.max(new_data, d => d.keer)]); // over welke getallen de bars verdeeld moeten worden\n\n      yscale.domain(new_data.map(d => d.getal)); // hoeveel bars er moeten zijn\n\n      g_xaxis.transition().call(xaxis); // soepele overgang en de as aanpassen op de nieuwe data\n\n      g_yaxis.transition().call(yaxis);\n      const rect = groep.selectAll('rect').data(new_data).join( // omvat de gebeurtenissen met de data \n      enter => {\n        //  alle data die nog niet gevisualiseerd is en gemaakt moet worden\n        const rect_enter = enter.append('rect').attr('x', 0); // zorg dat de bar een <rect> element is die 0 pixels van de x as staat\n\n        return rect_enter;\n      }, update => update, // wat er gebeurd met de elementen die er al waren\n      exit => {\n        return exit.remove();\n      } // elementen die verdwenen zijn moeten uit de visualisatie gehaald worden met exit\n      );\n      rect.transition() // De animatie om soepeler de verandering weer te geven\n      .attr('height', yscale.bandwidth()) // hoe hoog de balk is ten opzichte van de andere data\n      .attr('width', d => xscale(d.keer)) // de breedte van de balk\n      .attr('y', d => yscale(d.getal)); // de balk kom te staan bij de variabele\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"HOME\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["/Users/tomplaneet/Desktop/techtrack/fp/tt-fa/src/components/Home.js"],"names":["React","Component","d3","BrowserRouter","Router","Route","Link","Routes","Switch","Home","render","margin","top","bottom","left","right","width","height","svg","select","append","attr","groep","style","text","xscale","scaleLinear","range","yscale","scaleBand","rangeRound","paddingInner","xaxis","axisTop","scale","g_xaxis","yaxis","axisLeft","g_yaxis","on","telData","value","invoer","count","counts","data","forEach","filter","index","variable","push","x","netteData","geteldeArray","getal","Object","keys","waarde","values","aantal","update","filterData","bereik","arr","filtered_data","d","keer","new_data","domain","max","map","transition","call","rect","selectAll","join","enter","rect_enter","exit","remove","bandwidth"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n// import Barchart from './components/Barchart.js'\nimport * as d3 from 'd3';\nimport {\n    BrowserRouter as Router,\n    Route,\n    Link,\n    Routes as Switch,\n} from 'react-router-dom';\n\n\nclass Home extends Component{\n\n    render(){\n        const margin = { top: 50, bottom: 50, left: 150, right: 50 }; // marges om op de grafiek toe te passen\n        const width = 500 - margin.left - margin.right; // breedte\n        const height = 500 - margin.top - margin.bottom; // hoogte\n        const svg = d3.select('main') // selecteer <main> element uit html\n            .append('svg')  // het canvas voor de bar chart\n            .attr('width', width + margin.left + margin.right) // de breedte van het svg element\n            .attr('height', height + margin.top + margin.bottom); // de hoogte van het svg element\n    \n        const groep = svg.append('g')  // maak nieuw group element aan waar alle bars in zitten\n            .attr('transform', `translate(${margin.left},${margin.top})`); // positionering van het group element\n    \n        svg.append(\"text\")\n            .attr(\"transform\", \"translate(10,250)rotate(90)\") // 90 graden draaien en aan de zijkant van de bar chart zetten\n            .style(\"text-anchor\", \"middle\") // tekst moet in het midden staan\n            .text('Variabele'); // tekst\n    \n        svg.append(\"text\")\n            .attr(\"transform\", \"translate(300,20)\")\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Aantal keer voorgekomen in enquete\");\n    \n    \n        const xscale = d3.scaleLinear().range([0, width]); // over hoeveel pixels de bar width verdeeld worden\n        const yscale = d3.scaleBand().rangeRound([0, height]).paddingInner(0.1); // over hoeveel pixels de bar height verdeelt worden met tussenruimte\n    \n        const xaxis = d3.axisTop().scale(xscale); // de horizontale as maken zodat er ook lijnen komen te staan\n        const g_xaxis = groep.append('g').attr('class', 'x axis'); // deze as wordt een group met door d3 geintegreerde elementen zoals ticks en getallen\n    \n        const yaxis = d3.axisLeft().scale(yscale); // de verticale as  met getallen aan de linkerkant\n        const g_yaxis = groep.append('g').attr('class', 'y axis');\n    \n    \n        d3.select('select') // selecteer het HTML element <select> (ook wel het filter)\n            .on('change', function () { // als er verandering wordt aangebracht\n                telData(this.value)\n            })\n    \n    \n        function telData(invoer) {\n            let count = [] // nieuwe array met alle geselecteerde antwoorden uit de dataset\n            const counts = [] // nieuwe array met alle getelde geselecteerde antwoorden\n    \n            data.forEach((filter, index) => { // ga door alle regels in het .json bestand heen\n                const variable = data[index][invoer] // zoek de variabelen die voldoen aan de waarde die is aangegeven in <select>\n                count.push(variable) // zet alleen deze vragen in een lege array\n            })\n    \n            count.forEach(function (x) { // neem elke regel uit deze array appart\n                counts[x] = (counts[x] || 0) + 1; // voor iedere keer dat iets voorkomt, wordt de waarde +1\n            });\n    \n            netteData(counts)\n        }\n    \n    \n        function netteData(counts) {\n            let geteldeArray = [] // nieuwe array om met bijbehorende labels zodat ook string gebruikt kan worden\n    \n            let getal = Object.keys(counts) // de variabelen\n            let waarde = Object.values(counts) // de waarden\n    \n            getal.forEach((x, index) => { // van alle variabelen\n    \n                const aantal = waarde[index]; // hoevaak het voorkomt is de waarde van de variabele\n    \n                geteldeArray.push({\n                    \"getal\": x, \"keer\": aantal // in de nieuwe array wordt de data netjes gepresenteerd\n                })\n            })\n            update(geteldeArray) // update met de bijbehorende  data\n    \n            d3.select('input[type=\"range\"]') //  slider html element\n                .on('change', function () { // als dit veranderd\n                    filterData(this.value, geteldeArray)\n                });\n        }\n    \n    \n        function filterData(bereik, arr) {\n            const filtered_data = arr.filter((d) => d.keer >= bereik) // filter door de array naar variabelen met een .keer boven de frequentie\n            update(filtered_data); // gebruik deze data voor de nieuwe bar chart\n        }\n    \n    \n    function update(new_data) { // updaten van de data\n    \n        xscale.domain([0, d3.max(new_data, (d) => d.keer)]); // over welke getallen de bars verdeeld moeten worden\n        yscale.domain(new_data.map((d) => d.getal)); // hoeveel bars er moeten zijn\n        g_xaxis.transition().call(xaxis); // soepele overgang en de as aanpassen op de nieuwe data\n        g_yaxis.transition().call(yaxis);\n    \n        const rect = groep.selectAll('rect').data(new_data).join( // omvat de gebeurtenissen met de data \n    \n            (enter) => { //  alle data die nog niet gevisualiseerd is en gemaakt moet worden\n    \n                const rect_enter = enter.append('rect').attr('x', 0); // zorg dat de bar een <rect> element is die 0 pixels van de x as staat\n                return rect_enter;\n    \n            },\n            (update) => update,\n            // wat er gebeurd met de elementen die er al waren\n            (exit) => {\n    \n                return exit.remove()\n            }// elementen die verdwenen zijn moeten uit de visualisatie gehaald worden met exit\n    \n        );\n    \n        rect.transition() // De animatie om soepeler de verandering weer te geven\n            .attr('height', yscale.bandwidth()) // hoe hoog de balk is ten opzichte van de andere data\n            .attr('width', (d) => xscale(d.keer)) // de breedte van de balk\n            .attr('y', (d) => yscale(d.getal)) // de balk kom te staan bij de variabele\n    }\nreturn(\n    <div>\n        <h1>HOME</h1>\n    </div>\n)\n}\n}\n\nexport default Home"]},"metadata":{},"sourceType":"module"}